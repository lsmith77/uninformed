<?php

/**
 * ClauseBody
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    uninformed
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 6820 2009-11-30 17:27:49Z jwage $
 */
class ClauseBody extends BaseClauseBody
{
    protected $latestAdoptedClause;

    public function setUp()
    {
        parent::setUp();
        $this->hasAccessor('root_clause_body_id', 'getRootClauseBodyId');
    }

    public function getRootClauseBodyId() {
        $root_clause_body_id = $this->_get('root_clause_body_id');
        return empty($root_clause_body_id) ? $this->_get('id') : $root_clause_body_id;
    }

    public function preSave($event) {
        $invoker = $event->getInvoker();

        $root_clause_body_id = $invoker->_get('root_clause_body_id');
        $parent_clause_body_id = $invoker->_get('parent_clause_body_id');
        if (!empty($parent_clause_body_id) && empty($root_clause_body_id)) {
            $root_clause_body_id = $invoker->ClauseBodyParent->root_clause_body_id;
            $invoker->set('root_clause_body_id', $root_clause_body_id);
        }
    }

    public function setLatestAdoptedClause() {
        if (!empty($this->latestAdoptedClause)) {
            return $this->latestAdoptedClause;
        }

        $max_adoption_date = Doctrine_Query::create()
            ->select('MAX(adoption_date)')
            ->from('Document d')
            ->innerJoin('d.Clauses c')
            ->where('c.clause_body_id = ?', $this->_get('id'))
            ->execute(array(), Doctrine_Core::HYDRATE_SINGLE_SCALAR);

        $this->latestAdoptedClause = Doctrine_Query::create()
            ->from('Clause c')
            ->innerJoin('c.Document d')
            ->where('c.clause_body_id = ? AND d.adoption_date = ?', array($this->_get('id'), $max_adoption_date))
            ->fetchOne();

        return $this->latestAdoptedClause;
    }

    public function getAddresseeIds() {
        $ids = Doctrine_Query::create()
            ->select('addressee_id')
            ->from('ClauseAddressee')
            ->where('clause_body_id = ?', $this->_get('id'))
            ->execute(array(), Doctrine_Core::HYDRATE_SCALAR);
        foreach ($ids as $key => $id) {
            $ids[$key] = reset($id);
        }
        return $ids;
    }

    public function getClauseId() {
        $clause = $this->setLatestAdoptedClause();
        if (empty($clause)) {
            return null;
        }
        return $clause->id;
    }

    public function isIndexable() {
        $clause = $this->setLatestAdoptedClause();
        return !empty($clause);
    }

    public function getDocumentId() {
        $clause = $this->setLatestAdoptedClause();
        if (empty($clause)) {
            return null;
        }
        return $clause->getDocumentId();
    }

    public function getOrganisationId() {
        $clause = $this->setLatestAdoptedClause();
        if (empty($clause)) {
            return null;
        }
        return $clause->getOrganisationId();
    }

    public function getIsLatestClauseBodySolr() {
        return $this->_get('is_latest_clause_body') ? 'true' : 'false';
    }

    public function getLegalValue() {
        $clause = $this->setLatestAdoptedClause();
        if (empty($clause)) {
            return null;
        }
        return $clause->getLegalValue();
    }

    public function getDocumenttypeId() {
        $clause = $this->setLatestAdoptedClause();
        if (empty($clause)) {
            return null;
        }
        return $clause->getDocumenttypeId();
    }

    public function getTitle() {
        $clause = $this->setLatestAdoptedClause();
        if (empty($clause)) {
            return null;
        }
        return $clause->getTitle();
    }

    public function getAdoptionDate() {
        $clause = $this->setLatestAdoptedClause();
        if (empty($clause)) {
            return null;
        }
        return $clause->getAdoptionDate();
    }

    public function getContent() {
        $operative_phrase = (string)$this->_get('ClauseOperativePhrase');
        return preg_replace('#\b('.preg_quote($operative_phrase, '#').')\b#i', '<em>$1</em>', $this->_get('content'));
    }
}
